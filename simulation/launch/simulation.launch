<launch>
  <arg name="paused" default="false" doc="Start gazebo in paused mode" />
  <!-- remap topics to conform to ROS-I specifications -->
  <remap from="/arm_controller/follow_joint_trajectory" to="/joint_trajectory_action" />
  <remap from="/arm_controller/state" to="/feedback_states" />
  <remap from="/arm_controller/command" to="/joint_path_command" />

  <!-- urdf xml robot description loaded on the Parameter Server, converting the xacro into a proper urdf file-->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find simulation)/urdf/abb_irb120_schunk_mpz45.xacro'" />

  <!-- startup simulated world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="/home/martijn/School/Afstuderen/thuis-werken/catkin_ws/src/simulation/puzzle.world" />
    <arg name="gui" value="true" />
    <arg name="paused" value="$(arg paused)" />
  </include>



  <!-- push robot_description to factory and spawn robot in gazebo -->
  <node name="abb_irb120_spawn" pkg="gazebo_ros" type="spawn_model" output="screen" args="-urdf -param robot_description -model abb_irb120_schunk_mpz45" />

  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen"></node>

  <!-- init and start Gazebo ros_control interface -->
  <include file="$(find abb_irb120_gazebo)/launch/irb120_3_58_control.launch" />
  <include file="$(find abb_irb120_schunk_mpz45_moveit_config)/launch/planning_context.launch" />

  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg if="$(arg debug)" name="launch_prefix" value="gdb -x $(find abb_irb120_schunk_mpz45_moveit_config)/launch/gdb_settings.gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg if="$(arg info)" name="command_args" value="--debug" />

  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true" />
  <arg name="fake_execution" default="false" />
  <arg name="max_safe_path_cost" default="1" />
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true" />

  <!-- Planning Functionality -->
  <include ns="move_group" file="$(find abb_irb120_schunk_mpz45_moveit_config)/launch/planning_pipeline.launch.xml">
    <arg name="pipeline" value="ompl" />
  </include>

  <!-- Trajectory Execution Functionality -->
  <include ns="move_group" file="$(find abb_irb120_schunk_mpz45_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="abb_irb120_schunk_mpz45" unless="$(arg fake_execution)" />
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)" />
  </include>

  <!-- Sensors Functionality -->
  <include ns="move_group" file="$(find abb_irb120_schunk_mpz45_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_sensor_manager" value="abb_irb120_schunk_mpz45" />
  </include>

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)" />
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)" />
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

    <!-- load these non-default MoveGroup capabilities -->
    <!--
    <param name="capabilities" value="
                  a_package/AwsomeMotionPlanningCapability
                  another_package/GraspPlanningPipeline
                  " />
    -->

    <!-- inhibit these default MoveGroup capabilities -->
    <!--
    <param name="disable_capabilities" value="
                  move_group/MoveGroupKinematicsService
                  move_group/ClearOctomapService
                  " />
    -->

    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>
</launch>